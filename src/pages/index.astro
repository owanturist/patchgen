---
import Root from "~/layouts/root.astro"

import { ALL_PATCHES } from "~/tools/patch"
import { shuffle } from "~/tools/shuffle"

const maxPatchWidth = Math.max(
  ...ALL_PATCHES.flatMap((patch) => patch.tiles.map((row) => row.length)),
)

const SHUFFLED_PATCHES = [ALL_PATCHES[0], ...shuffle(ALL_PATCHES.slice(1))]
---

<Root class="snap-y snap-mandatory">
  <div
    class="max-w-sm mx-auto grid px-4 py-6 divide-y-4 divide-dashed divide-gray-300"
    style={{
      gridTemplateColumns: `repeat(${2 * maxPatchWidth}, minmax(0, 1fr))`,
    }}
  >
    {
      SHUFFLED_PATCHES.map((patch) => {
        const patchWidth = Math.max(...patch.tiles.map((row) => row.length))
        const shift = maxPatchWidth - patchWidth

        return (
          <div class="grid col-span-full grid-cols-subgrid min-h-screen items-center justify-center snap-center">
            <div class="grid col-span-full grid-cols-subgrid gap-px">
              {patch.tiles.map((row, rowIndex) => {
                return row.map((tile, colIndex) => {
                  if (tile === 0) {
                    return null
                  }

                  return (
                    <div
                      class="col-span-2 bg-gray-300 ring-1 aspect-square flex justify-center items-center"
                      style={{
                        gridColumnStart: 2 * colIndex + 1 + shift,
                        gridRowStart: rowIndex + 1,
                      }}
                    >
                      {tile === 2 && (
                        <div class="size-3/5 bg-blue-400 rounded-full" />
                      )}
                    </div>
                  )
                })
              })}

              <div class="col-span-full">
                <p class="font-bold">Price: {patch.price}</p>
                <p>Time: {patch.time}</p>
              </div>
            </div>
          </div>
        )
      })
    }
  </div>
</Root>
